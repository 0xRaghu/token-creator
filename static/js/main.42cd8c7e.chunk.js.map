{"version":3,"sources":["assets/images/logo.png","getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","web3Raghu","providers","HttpProvider","user","raghu","App","state","deployedTokenAddressList","accounts","raghuAccounts","contract","name","symbol","decimals","address","message","msgColor","totalSupply","loader","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","TokenGenerator","networks","instance","Contract","abi","from","gasLimit","setState","methods","getAllAddresses","call","addressess","alert","makeToken","event","encodedABI","generateToken","encodeABI","signTransaction","to","options","gas","data","chainId","chain","hardfork","tx","sendSignedTransaction","rawTransaction","resp","console","log","length","this","className","style","marginTop","marginBottom","Image","width","src","require","rounded","padding","Form","paddingTop","onSubmit","preventDefault","Group","controlId","Label","Control","value","onChange","target","type","placeholder","temp","Button","variant","color","Spinner","animation","role","Component","Boolean","location","hostname","match","config","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.42cd8c7e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7ba262cf.png\";","import Web3 from \"web3\";\n// import HDWalletProvider from \"@truffle/hdwallet-provider\";\n\nconst getWeb3 = () =>\n\tnew Promise((resolve, reject) => {\n\t\t// Wait for loading completion to avoid race conditions with web3 injection timing.\n\t\twindow.addEventListener(\"load\", async () => {\n\t\t\t// Modern dapp browsers...\n\t\t\tlet web3, web3Raghu;\n\t\t\tif (window.ethereum) {\n\t\t\t\tweb3 = new Web3(window.ethereum);\n\t\t\t\ttry {\n\t\t\t\t\t// Request account access if needed\n\t\t\t\t\tawait window.ethereum.enable();\n\t\t\t\t\t// Acccounts now exposed\n\t\t\t\t\t// resolve(web3);\n\t\t\t\t} catch (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// // Legacy dapp browsers...\n\t\t\t// else if (window.web3) {\n\t\t\t//   // Use Mist/MetaMask's provider.\n\t\t\t//   const web3 = window.web3;\n\t\t\t//   console.log(\"Injected web3 detected.\");\n\t\t\t//   resolve(web3);\n\t\t\t// }\n\t\t\t// Fallback to localhost; use dev console port by default...\n\n\t\t\t// const provider = new HDWalletProvider(\n\t\t\t//  \"abuse culture whale flight narrow panther garage sail crime snack custom you\",\n\t\t\t//  \"https://rinkeby.infura.io/v3/64c8dc6e626e4fe48c73666d6a1406a8\"\n\t\t\t// )\n\t\t\t// web3Raghu = new Web3(provider);\n\n\t\t\tweb3Raghu = new Web3(\n\t\t\t\tnew Web3.providers.HttpProvider(\n\t\t\t\t\t\"https://rinkeby.infura.io/v3/76572308a2714058a90cddf49b651930\" ||\n\t\t\t\t\t\tprocess.env.REACT_APP_API_KEY\n\t\t\t\t)\n\t\t\t);\n\n\t\t\t// console.log(\"No web3 instance injected, using Local web3.\");\n\t\t\t// resolve(web3Raghu);\n\t\t\tresolve({ user: web3, raghu: web3Raghu });\n\t\t});\n\t});\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport TokenGenerator from \"./contracts/TokenGenerator.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Image from \"react-bootstrap/Image\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n\tstate = {\n\t\tdeployedTokenAddressList: [],\n\t\tweb3: null,\n\t\taccounts: null,\n\t\traghuAccounts: null,\n\t\tcontract: null,\n\t\tname: \"\",\n\t\tsymbol: \"\",\n\t\tdecimals: 0,\n\t\taddress: \"\",\n\t\tmessage: \"\",\n\t\tmsgColor: \"black\",\n\t\ttotalSupply: 0,\n\t\tloader: false,\n\t};\n\n\tcomponentDidMount = async () => {\n\t\ttry {\n\t\t\t// console.log(\"api key\" + process.env.REACT_APP_API_KEY);\n\t\t\t// Get network provider and web3 instance.\n\t\t\tconst web3 = await getWeb3();\n\n\t\t\t// Use web3 to get the user's accounts.\n\t\t\tconst accounts = await web3.user.eth.getAccounts();\n\t\t\t// const raghuAccounts = process.env.REACT_APP_ACCOUNT;\n\t\t\tconst raghuAccounts =\n\t\t\t\t\"0xF08f8261d04a08c1fe0fA4653661809775C9DC08\" ||\n\t\t\t\tprocess.env.REACT_APP_ACCOUNT;\n\t\t\t// console.log(accounts);\n\t\t\t// console.log(raghuAccounts);\n\n\t\t\t// Get the contract instance.\n\t\t\tconst networkId = await web3.raghu.eth.net.getId();\n\t\t\t// console.log(\"id\" + networkId);\n\t\t\tconst deployedNetwork = TokenGenerator.networks[networkId];\n\t\t\tconst instance = new web3.raghu.eth.Contract(\n\t\t\t\tTokenGenerator.abi,\n\t\t\t\tdeployedNetwork.address,\n\t\t\t\t{\n\t\t\t\t\tfrom: raghuAccounts,\n\t\t\t\t\tgasLimit: 3000000,\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// console.log(instance.options.address);\n\n\t\t\t// Set web3, accounts, and contract to the state, and then proceed with an\n\t\t\t// example of interacting with the contract's methods.\n\t\t\tthis.setState({ web3, accounts, raghuAccounts, contract: instance });\n\t\t\tconst addressess = await this.state.contract.methods\n\t\t\t\t.getAllAddresses()\n\t\t\t\t.call();\n\t\t\tthis.setState({ deployedTokenAddressList: addressess });\n\t\t\t// console.log(this.state.deployedTokenAddressList);\n\t\t} catch (error) {\n\t\t\t// Catch any errors for any of the above operations.\n\t\t\talert(\n\t\t\t\t`Failed to load web3, accounts, or contract. Check console for details.`\n\t\t\t);\n\t\t\t// console.error(error);\n\t\t}\n\t};\n\n\tmakeToken = async (event) => {\n\t\t// console.log(\n\t\t// \tthis.state.name +\n\t\t// \t\tthis.state.symbol +\n\t\t// \t\tthis.state.decimals +\n\t\t// \t\tthis.state.totalSupply\n\t\t// );\n\t\t// console.log(this.state.raghuAccounts + \" \" + this.state.accounts[0]);\n\t\tthis.setState({ message: \"Generating new token...\", loader: true });\n\t\tvar encodedABI = this.state.contract.methods\n\t\t\t.generateToken(\n\t\t\t\tthis.state.name,\n\t\t\t\tthis.state.symbol,\n\t\t\t\tthis.state.decimals,\n\t\t\t\tthis.state.totalSupply,\n\t\t\t\tthis.state.accounts[0]\n\t\t\t)\n\t\t\t.encodeABI();\n\t\t// console.log(encodedABI);\n\t\t// var nonce = (await this.state.web3.raghu.eth.getTransactionCount(this.state.raghuAccounts));\n\t\t// nonce += 16;\n\t\t// console.log(nonce);\n\t\t// console.log(this.state.contract.options.address);\n\t\t// var _nonce = nonce.toString(16);\n\t\tconst tx = await this.state.web3.raghu.eth.accounts.signTransaction(\n\t\t\t{\n\t\t\t\t// nonce:'0x' + _nonce,\n\t\t\t\tto: this.state.contract.options.address,\n\t\t\t\tgas: \"2000000\",\n\t\t\t\t// gasPrice: '60',\n\t\t\t\tdata: encodedABI,\n\t\t\t\tchainId: 4,\n\t\t\t\tchain: \"rinkeby\",\n\t\t\t\thardfork: \"petersburg\",\n\t\t\t},\n\t\t\t\"0x7ab9a733eaed45272dcbbd0c74dbcf5859258dc3a6727af139b2cb6fc3445e7f\" ||\n\t\t\t\tprocess.env.REACT_APP_PVT_KEY\n\t\t); // replace with process.env.REACT_APP_PVT_KEY\n\t\t// console.log(tx);\n\t\t// console.log(\n\t\t// \tawait this.state.web3.raghu.eth.accounts.recoverTransaction(\n\t\t// \t\ttx.rawTransaction\n\t\t// \t)\n\t\t// );\n\n\t\tconst resp = await this.state.web3.raghu.eth.sendSignedTransaction(\n\t\t\ttx.rawTransaction\n\t\t);\n\t\tconsole.log(resp);\n\n\t\tthis.setState({ message: \"Generated new token\", loader: false });\n\t\tconst addressess = await this.state.contract.methods\n\t\t\t.getAllAddresses()\n\t\t\t.call();\n\t\tthis.setState({ deployedTokenAddressList: addressess });\n\t\tthis.setState({\n\t\t\taddress: this.state.deployedTokenAddressList[\n\t\t\t\tthis.state.deployedTokenAddressList.length - 1\n\t\t\t],\n\t\t});\n\t\t// this.setState({ name: \"\", symbol: \"\", decimals: \"\", totalSupply: \"\" });\n\t};\n\n\trender() {\n\t\tif (!this.state.web3) {\n\t\t\treturn <div>Loading Web3, accounts, and contract...</div>;\n\t\t}\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName=\"App container bg-white\"\n\t\t\t\tstyle={{ marginTop: \"50px\", marginBottom: \"50px\" }}\n\t\t\t>\n\t\t\t\t<Image\n\t\t\t\t\tstyle={{ width: \"30%\" }}\n\t\t\t\t\tsrc={require(\"./assets/images/logo.png\")}\n\t\t\t\t\trounded\n\t\t\t\t/>\n\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tpadding: \"20px\",\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<h1> Token Creator</h1>\n\t\t\t\t\t<Form\n\t\t\t\t\t\tstyle={{ paddingTop: 50 }}\n\t\t\t\t\t\tonSubmit={(event) => {\n\t\t\t\t\t\t\tthis.makeToken();\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Form.Group controlId=\"tokenName\">\n\t\t\t\t\t\t\t<Form.Label>Token Name</Form.Label>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\tvalue={this.state.name}\n\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\tthis.setState({ name: event.target.value });\n\t\t\t\t\t\t\t\t\t// console.log(this.state.name);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tplaceholder=\"Enter Token Name\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Form.Group>\n\n\t\t\t\t\t\t<Form.Group controlId=\"tokenSymbol\">\n\t\t\t\t\t\t\t<Form.Label>Token Symbol</Form.Label>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\tvalue={this.state.symbol}\n\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\tthis.setState({ symbol: event.target.value });\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tplaceholder=\"Enter Token Symbol\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Form.Group>\n\n\t\t\t\t\t\t<Form.Group controlId=\"tokenDecimals\">\n\t\t\t\t\t\t\t<Form.Label>Decimal places</Form.Label>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\tvalue={this.state.decimals}\n\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\tthis.setState({ decimals: event.target.value });\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\ttype=\"int\"\n\t\t\t\t\t\t\t\tplaceholder=\"Enter Decimal Places\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Form.Group>\n\n\t\t\t\t\t\t<Form.Group controlId=\"totalSupply\">\n\t\t\t\t\t\t\t<Form.Label>Total Supply</Form.Label>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\tvalue={this.state.totalSupply}\n\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\tvar temp = event.target.value;\n\t\t\t\t\t\t\t\t\tthis.setState({ totalSupply: temp });\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\ttype=\"int\"\n\t\t\t\t\t\t\t\tplaceholder=\"Enter Total Supply\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Form.Group>\n\n\t\t\t\t\t\t<Button variant=\"primary\" type=\"submit\">\n\t\t\t\t\t\t\tGenerate Token\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Form>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\tThe{\" \"}\n\t\t\t\t\t\t\t<span style={{ color: this.state.name ? \"red\" : \"black\" }}>\n\t\t\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t\t\t{this.state.name ? this.state.name : \"<<Token-name>>\"}{\" \"}\n\t\t\t\t\t\t\t</span>{\" \"}\n\t\t\t\t\t\t\tToken with symbol{\" \"}\n\t\t\t\t\t\t\t<span style={{ color: this.state.symbol ? \"red\" : \"black\" }}>\n\t\t\t\t\t\t\t\t{this.state.symbol ? this.state.symbol : \"<<symbol>>\"}{\" \"}\n\t\t\t\t\t\t\t</span>{\" \"}\n\t\t\t\t\t\t\twith{\" \"}\n\t\t\t\t\t\t\t<span style={{ color: this.state.totalSupply ? \"red\" : \"black\" }}>\n\t\t\t\t\t\t\t\t{this.state.totalSupply\n\t\t\t\t\t\t\t\t\t? this.state.totalSupply\n\t\t\t\t\t\t\t\t\t: \"<<total supply>>\"}{\" \"}\n\t\t\t\t\t\t\t</span>{\" \"}\n\t\t\t\t\t\t\tTokens generated at address{\" \"}\n\t\t\t\t\t\t\t<span style={{ color: this.state.address ? \"red\" : \"black\" }}>\n\t\t\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t\t\t{this.state.address ? this.state.address : \"<<address>>\"}{\" \"}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{this.state.loader ? (\n\t\t\t\t\t\t\t<div style={{ color: this.state.msgColor }}>\n\t\t\t\t\t\t\t\tMessage: {this.state.message}\n\t\t\t\t\t\t\t\t<Spinner animation=\"border\" role=\"status\">\n\t\t\t\t\t\t\t\t\t<span className=\"sr-only\">Loading...</span>\n\t\t\t\t\t\t\t\t</Spinner>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<p></p>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === \"localhost\" ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === \"[::1]\" ||\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\t// console.log(\n\t\t\t\t\t//   'This web app is being served cache-first by a service ' +\n\t\t\t\t\t//     'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t// );\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\t// console.log(\n\t\t\t\t\t\t\t//   'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t//     'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t// );\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\t// console.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\t// console.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf(\"javascript\") === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\t// console.log(\n\t\t\t//   'No internet connection found. App is running in offline mode.'\n\t\t\t// );\n\t\t});\n}\n\nexport function unregister() {\n\tif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nrequire('dotenv').config();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}